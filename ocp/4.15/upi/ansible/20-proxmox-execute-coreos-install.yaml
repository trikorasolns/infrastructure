---
- name: "Execute CoreOS install"
  hosts: "ocp_services"
  gather_facts: true

  pre_tasks:
  - name: "Define variables"
    ansible.builtin.include_tasks:
      file: tasks/set_ocp_install_dir.yaml

  tasks:
  - name: "Read bootstrap Ignition file signature"
    ansible.builtin.slurp:
      src: "{{ openshift_cluster_install_dir }}/bootstrap.ign.sig"
    register: bootstrap_sig_slurp

  - name: "Read master Ignition file signature"
    ansible.builtin.slurp:
      src: "{{ openshift_cluster_install_dir }}/master.ign.sig"
    register: master_sig_slurp

  - name: "Read worker Ignition file signature"
    ansible.builtin.slurp:
      src: "{{ openshift_cluster_install_dir }}/worker.ign.sig"
    register: worker_sig_slurp

  post_tasks:

    - name: "Set CoreOS Image Location under localhost"
      ansible.builtin.set_fact:
        global_bootstrap_hash: "{{ bootstrap_sig_slurp.content | b64decode }}"
        global_master_hash: "{{ master_sig_slurp.content | b64decode }}"
        global_worker_hash: "{{ worker_sig_slurp.content | b64decode }}"
      delegate_to: localhost
      delegate_facts: True

- name: "Setup Proxmox VMs"
  hosts: "proxmox_nodes"
  gather_facts: true

  pre_tasks:
  - name: "Define variables"
    ansible.builtin.include_tasks:
      file: tasks/set_ocp_install_dir.yaml

  - name: "Fetch Glocal variables"
    ansible.builtin.set_fact:
      bootstrap_hash: "{{ hostvars['localhost']['global_bootstrap_hash'] }}"
      master_hash: "{{ hostvars['localhost']['global_master_hash']}}"
      worker_hash: "{{ hostvars['localhost']['global_worker_hash'] }}"
    delegate_to: localhost

  tasks:
    - name: "Build VM list"
      ansible.builtin.set_fact:
        # vm_host_list: "{{ (groups['ocp_bootstrap'] | default([])) + (groups['ocp_control_plane'] | default([])) + (groups['ocp_compute_node'] | default([])) }}"
        vm_host_list: "{{ (groups['ocp_bootstrap'] | default([])) + (groups['ocp_control_plane'] | default([])) }}"

    - name: "Print VM list"
      ansible.builtin.debug:
        msg: 
          - "vm_host_list: {{ vm_host_list }}"
          - "bootstrap_hash: {{ bootstrap_hash }}"
          - "master_hash: {{ master_hash }}"
          - "worker_hash: {{ worker_hash }}"
        verbosity: 2

    - name: "Print hash"
      ansible.builtin.debug:
        msg: 
          - "ansible_facts: {{ ansible_facts }}"
          - "ansible_hostname: {{ ansible_hostname }}"
          - "role: {{ hostvars[item].ocp_role + '_hash' }}"
          - "ignition hash: {{ hostvars[ansible_hostname][hostvars[item].ocp_role + '_hash'] }}"
          # - "???: {{ hostvars[item].ocp_role + '_hash' }}"
          # - "???: {{ lookup('env', hostvars[item].ocp_role + '_hash') }}"
          # - "???: {{ ansible_facts[hostvars[item].ocp_role + '_hash'] }}"
        verbosity: 2
      loop: "{{ vm_host_list }}"
      when: ansible_hostname == hostvars[item].pve.owner

    - name: "Stop all VM on it's node"
      ansible.builtin.include_tasks:
        file: tasks/proxmox_vm_start.yaml
      vars:
        vm_name: "{{ item }}"
        state: "Stopped"
      loop: "{{ vm_host_list }}"
      when: ansible_hostname == hostvars[item].pve.owner

    - name: "Generate VM ISO"
      ansible.builtin.include_tasks:
        file: tasks/proxmox_ignition_iso.yaml
      vars:
        role: "{{ item }}"
      loop:
      - { name: "bootstrap", hash: "{{ bootstrap_hash }}" }
      - { name: "master", hash: "{{ master_hash }}" }
      - { name: "worker", hash: "{{ worker_hash }}" }

    - name: "Print hash"
      ansible.builtin.debug:
        msg: 
        - "qm set {{ hostvars[item].pve.vmid }} --cdrom local:iso/ignition-{{ hostvars[item].ocp_role }}.iso"
        - "qm set {{ hostvars[item].pve.vmid }} --boot 'order=;ide2;scsi0;net0'"
      loop: "{{ vm_host_list }}"
      when: ansible_hostname == hostvars[item].pve.owner

    - name: "Make the VM boot from the bootstrap ISO CD ROM"
      ansible.builtin.shell: |
        qm set {{ hostvars[item].pve.vmid }} --cdrom local:iso/ignition-{{ hostvars[item].ocp_role }}.iso
        qm set {{ hostvars[item].pve.vmid }} --boot 'order=;ide2;scsi0;net0'
      loop: "{{ vm_host_list }}"
      when: ansible_hostname == hostvars[item].pve.owner

    - name: "Start the VMs"
      ansible.builtin.shell: |
        qm start {{ hostvars[item].pve.vmid }}
      loop: "{{ vm_host_list }}"
      when: ansible_hostname == hostvars[item].pve.owner

    # - name: "Set values for the Bootstrap VM"
    #   ansible.builtin.shell: |
    #     qm set {{ hostvars[item].pve.vmid }} --cdrom none
    #     qm set {{ hostvars[item].pve.vmid }} --boot 'order=scsi0;ide2;net0'
    #   loop: "{{ groups['ocp_bootstrap'] }}"
    #   when: groups['ocp_bootstrap'] is defined and ansible_hostname == hostvars[item].pve.owner
...
