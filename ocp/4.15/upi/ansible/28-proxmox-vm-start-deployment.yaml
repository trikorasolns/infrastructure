---
- name: "Setup Proxmox VMs to deploy OCP"
  hosts: "proxmox_nodes"
  gather_facts: true

  tasks:
    - name: "Build VM list"
      ansible.builtin.set_fact:
        # vm_host_list: "{{ (groups['ocp_bootstrap'] | default([])) + (groups['ocp_control_plane'] | default([])) + (groups['ocp_compute_node'] | default([])) }}"
        vm_host_list: "{{ (groups['ocp_bootstrap'] | default([])) + (groups['ocp_control_plane'] | default([])) }}"

    - name: "Stop all VM on it's node"
      ansible.builtin.include_tasks:
        file: tasks/proxmox_vm_start.yaml
      vars:
        vm_name: "{{ item }}"
        state: "Stopped"
      loop: "{{ vm_host_list }}"
      when: ansible_hostname == hostvars[item].pve.owner

    # - name: "Stop the bootstrap VM on it's node"
    #   ansible.builtin.shell: |
    #     qm stop {{ hostvars[item].pve.vmid }}
    #   loop: "{{ groups['ocp_bootstrap'] }}"
    #   when: groups['ocp_bootstrap'] is defined and ansible_hostname == hostvars[item].pve.owner

    # - name: "Stop the control plane VMs on it's node"
    #   ansible.builtin.shell: |
    #     qm stop {{ hostvars[item].pve.vmid }}
    #   loop: "{{ groups['ocp_control_plane'] }}"
    #   when: groups['ocp_control_plane'] is defined and ansible_hostname == hostvars[item].pve.owner

    # - name: "Stop the compute node VMs on it's node"
    #   ansible.builtin.shell: |
    #     qm stop {{ hostvars[item].pve.vmid }}
    #   loop: "{{ groups['ocp_compute_node'] }}"
    #   when: use_compute_nodes and groups['ocp_compute_node'] is defined and ansible_hostname == hostvars[item].pve.owner

    - name: "Set values for the VMs"
      ansible.builtin.shell: |
        qm set {{ hostvars[item].pve.vmid }} -ide2 none,media=cdrom
        qm set {{ hostvars[item].pve.vmid }} -ide0 none,media=cdrom
        qm set {{ hostvars[item].pve.vmid }} --boot 'order=scsi0;ide2;net0'
      loop: "{{ vm_host_list }}"
      when: ansible_hostname == hostvars[item].pve.owner

    # - name: "Set values for the Bootstrap VM"
    #   ansible.builtin.shell: |
    #     qm set {{ hostvars[item].pve.vmid }} --cdrom none
    #     qm set {{ hostvars[item].pve.vmid }} --boot 'order=scsi0;ide2;net0'
    #   loop: "{{ groups['ocp_bootstrap'] }}"
    #   when: groups['ocp_bootstrap'] is defined and ansible_hostname == hostvars[item].pve.owner

    # - name: "Set values for for the Control Plane VMs"
    #   ansible.builtin.shell: |
    #     qm set {{ hostvars[item].pve.vmid }} --cdrom none
    #     qm set {{ hostvars[item].pve.vmid }} --boot 'order=scsi0;ide2;net0'
    #   loop: "{{ groups['ocp_control_plane'] }}"
    #   when: groups['ocp_control_plane'] is defined and ansible_hostname == hostvars[item].pve.owner

    # - name: "Set values for the Compute Node VMs"
    #   ansible.builtin.shell: |
    #     qm set {{ hostvars[item].pve.vmid }} --cdrom none
    #     qm set {{ hostvars[item].pve.vmid }} --boot 'order=scsi0;ide2;net0'
    #   loop: "{{ groups['ocp_compute_node'] }}"
    #   when: groups['ocp_compute_node'] is defined and ansible_hostname == hostvars[item].pve.owner

    - name: "Start Bootstrap VM on it's node"
      ansible.builtin.include_tasks:
        file: tasks/proxmox_vm_start.yaml
      vars:
        vm_name: "{{ item }}"
        state: "Started"
      loop: "{{ groups['ocp_bootstrap'] }}"
      when: ansible_hostname == hostvars[item].pve.owner
      
    - name: "Wait for the Bootstrap host port API Server (port 6443) to be available"
      ansible.builtin.wait_for:
        host: "{{ hostvars[item].ansible_host }}"
        port: 6443
        delay: 10
        state: drained
      loop: "{{ groups['ocp_bootstrap'] }}"
      when: ansible_hostname == hostvars[item].pve.owner

    - name: "Start the Control Plane VMs on their nodes"
      ansible.builtin.include_tasks:
        file: tasks/proxmox_vm_start.yaml
      vars:
        vm_name: "{{ item }}"
        state: "Started"
      loop: "{{ groups['ocp_control_plane'] }}"
      when: groups['ocp_control_plane'] is defined and ansible_hostname == hostvars[item].pve.owner
      
    - name: "Start the Compute Node VMs on their nodes"
      ansible.builtin.include_tasks:
        file: tasks/proxmox_vm_start.yaml
      vars:
        vm_name: "{{ item }}"
        state: "Started"
      loop: "{{ groups['ocp_compute_node'] }}"
      when: use_compute_nodes and groups['ocp_compute_node'] is defined and ansible_hostname == hostvars[item].pve.owner
      
    # - name: "Start the bootstrap VM"
    #   ansible.builtin.shell: |
    #     qm start {{ hostvars[item].pve.vmid }}
    #   loop: "{{ groups['ocp_bootstrap'] }}"
    #   when: groups['ocp_bootstrap'] is defined and ansible_hostname == hostvars[item].pve.owner

    # - name: "Start the Control Plane VMs"
    #   ansible.builtin.shell: |
    #     qm start {{ hostvars[item].pve.vmid }}
    #   loop: "{{ groups['ocp_control_plane'] }}"
    #   when: groups['ocp_control_plane'] is defined and ansible_hostname == hostvars[item].pve.owner

    # - name: "Start the Compute Node VMs - NOT FOR NOW"
    #   ansible.builtin.shell: |
    #     qm start {{ hostvars[item].pve.vmid }} --cdrom local:iso/{{ coreos_image_filename }}
    #   loop: "{{ groups['ocp_compute_node'] }}"
    #   when: use_compute_nodes and groups['ocp_compute_node'] is defined and ansible_hostname == hostvars[item].pve.owner
...
