---
- name: "Configure the OCP Services host"
  hosts: "ocp_services"
  gather_facts: true

  tasks:
  - name: "Debug"
    ansible.builtin.debug:
      msg:
        - "groups['ocp_control_plane']: {{ groups['ocp_control_plane']  }}"
        - "hostvars: {{ hostvars['ocp4-cp-1'] }}"
  
  - name: "Install required packages"
    ansible.builtin.package:
      name: "{{ required_packages }}"
      state: present
    become: true
    when: skip_install is undefined or not (skip_install | bool)

  - name: Replace a localhost entry searching for a literal string to avoid escaping
    ansible.builtin.lineinfile:
      path: "/etc/httpd/conf/httpd.conf"
      search_string: "Listen 80"
      line: "Listen 8080"
    become: true

  - name: Set haproxy_connect_any flag on
    ansible.posix.seboolean:
      name: haproxy_connect_any
      state: true
      persistent: true
    become: true

  - name: Set httpd_read_user_content flag on
    ansible.posix.seboolean:
      name: httpd_read_user_content
      state: true
      persistent: true
    become: true

# sudo setsebool -P haproxy_connect_any 1
# sudo setsebool -P httpd_can_network_connect on
# sudo setsebool -P httpd_graceful_shutdown on
# sudo setsebool -P httpd_can_network_relay on
# sudo setsebool -P nis_enabled on
# sudo semanage port -a -t http_port_t -p tcp 6443
# sudo semanage port -a -t http_port_t -p tcp 22623
# sudo semanage port -a -t http_port_t -p tcp 1936

  - name: "Template haproxy configuration file"
    ansible.builtin.template:
      src: "haproxy.cfg.j2"
      dest: "/etc/haproxy/haproxy.cfg"
      backup: true
    become: true

  - name: "Enable and start the required services"
    ansible.builtin.service:
      name: "{{ item }}"
      enabled: yes
      state: restarted
    loop: "{{ required_services }}"
    become: true

  - name: "Open firewalld for required services"
    ansible.posix.firewalld:
      service: "{{ item }}"
      state: enabled
      permanent: true
      immediate: true
      offline: true
    loop: "{{ firewalld_services }}"
    become: true

  - name: "Open firewalld for required ports"
    ansible.posix.firewalld:
      port: "{{ item }}"
      state: enabled
      permanent: true
      immediate: true
      offline: true
    loop: "{{ firewalld_ports }}"
    become: true

  - name: "Create openshift install root directory"
    ansible.builtin.file:
      path: "/var/www/html/ocp4"
      state: directory
      mode: '0755'
      owner: apache
      group: apache
    become: true

  - name: "Copy installation"
    ansible.builtin.copy:
      src: "{{ ocp_install_root_dir }}/{{ ocp_install_dir }}"
      dest: "/var/www/html/okd4/"
      remote_src: true
      owner: apache
      group: apache
    become: true
...
